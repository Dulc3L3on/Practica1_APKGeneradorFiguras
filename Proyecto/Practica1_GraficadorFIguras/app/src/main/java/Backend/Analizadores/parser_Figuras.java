
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import Backend.Manejadores.Operador;
import Backend.Manejadores.ManejadorErrores;
import Backend.Manejadores.ManejadorReportes;
import Backend.RecolectorFiguras;
import Backend.Entidades.Reporte;
import Backend.Entidades.ReporteError;
import Backend.Entidades.Token;
import Backend.EstructurasDeDatos.ListaEnlazada;
import Backend.EstructurasDeDatos.Pila;
import Backend.Entidades.Figuras.Figura;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser_Figuras extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser_FigurasSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser_Figuras() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser_Figuras(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser_Figuras(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\005\011\000\002" +
    "\005\004\000\002\006\013\000\002\006\004\000\002\007" +
    "\015\000\002\007\004\000\002\010\017\000\002\010\004" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\012\005\000\002\012\004\000\002\013\006\000\002\013" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\010\002\uffff\003\005\013\004\001\002\000" +
    "\016\003\050\006\053\007\055\010\047\011\054\012\051" +
    "\001\002\000\004\002\ufffe\001\002\000\012\002\uffe5\003" +
    "\uffe5\013\uffe5\014\011\001\002\000\004\002\010\001\002" +
    "\000\004\002\001\001\002\000\004\015\014\001\002\000" +
    "\010\002\uffff\003\005\013\004\001\002\000\004\002\000" +
    "\001\002\000\004\016\015\001\002\000\006\003\020\024" +
    "\017\001\002\000\010\002\uffe6\003\uffe6\013\uffe6\001\002" +
    "\000\010\003\024\017\022\024\023\001\002\000\004\025" +
    "\021\001\002\000\010\002\ufff5\003\ufff5\013\ufff5\001\002" +
    "\000\016\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\026" +
    "\uffe9\001\002\000\010\003\024\017\022\024\023\001\002" +
    "\000\004\026\044\001\002\000\014\020\036\021\034\022" +
    "\035\023\037\026\uffee\001\002\000\004\026\027\001\002" +
    "\000\010\003\024\017\022\024\023\001\002\000\004\026" +
    "\031\001\002\000\004\004\032\001\002\000\004\025\033" +
    "\001\002\000\010\002\ufff6\003\ufff6\013\ufff6\001\002\000" +
    "\010\003\024\017\022\024\023\001\002\000\010\003\024" +
    "\017\022\024\023\001\002\000\010\003\024\017\022\024" +
    "\023\001\002\000\010\003\024\017\022\024\023\001\002" +
    "\000\016\020\uffea\021\uffea\022\uffea\023\uffea\025\uffea\026" +
    "\uffea\001\002\000\016\020\uffed\021\uffed\022\035\023\037" +
    "\025\uffed\026\uffed\001\002\000\016\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\025\uffeb\026\uffeb\001\002\000\016\020\uffec" +
    "\021\uffec\022\035\023\037\025\uffec\026\uffec\001\002\000" +
    "\016\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7" +
    "\001\002\000\014\020\036\021\034\022\035\023\037\025" +
    "\046\001\002\000\016\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\025\uffe8\026\uffe8\001\002\000\006\003\074\024\073\001" +
    "\002\000\012\002\ufff7\003\ufff7\013\ufff7\014\ufff7\001\002" +
    "\000\006\003\112\024\111\001\002\000\012\002\ufffd\003" +
    "\ufffd\013\ufffd\014\ufffd\001\002\000\006\003\057\024\056" +
    "\001\002\000\006\003\074\024\073\001\002\000\006\003" +
    "\057\024\056\001\002\000\010\003\024\017\022\024\023" +
    "\001\002\000\004\025\061\001\002\000\012\002\ufffb\003" +
    "\ufffb\013\ufffb\014\ufffb\001\002\000\012\002\ufff3\003\ufff3" +
    "\013\ufff3\014\ufff3\001\002\000\004\026\063\001\002\000" +
    "\010\003\024\017\022\024\023\001\002\000\004\026\065" +
    "\001\002\000\010\003\024\017\022\024\023\001\002\000" +
    "\004\026\067\001\002\000\004\005\070\001\002\000\004" +
    "\025\071\001\002\000\012\002\ufff4\003\ufff4\013\ufff4\014" +
    "\ufff4\001\002\000\012\002\ufff9\003\ufff9\013\ufff9\014\ufff9" +
    "\001\002\000\010\003\024\017\022\024\023\001\002\000" +
    "\004\025\075\001\002\000\012\002\ufff1\003\ufff1\013\ufff1" +
    "\014\ufff1\001\002\000\004\026\077\001\002\000\010\003" +
    "\024\017\022\024\023\001\002\000\004\026\101\001\002" +
    "\000\010\003\024\017\022\024\023\001\002\000\004\026" +
    "\103\001\002\000\010\003\024\017\022\024\023\001\002" +
    "\000\004\026\105\001\002\000\004\005\106\001\002\000" +
    "\004\025\107\001\002\000\012\002\ufff2\003\ufff2\013\ufff2" +
    "\014\ufff2\001\002\000\012\002\ufffc\003\ufffc\013\ufffc\014" +
    "\ufffc\001\002\000\010\003\024\017\022\024\023\001\002" +
    "\000\004\025\114\001\002\000\012\002\ufff8\003\ufff8\013" +
    "\ufff8\014\ufff8\001\002\000\012\002\uffef\003\uffef\013\uffef" +
    "\014\uffef\001\002\000\004\026\116\001\002\000\010\003" +
    "\024\017\022\024\023\001\002\000\004\026\120\001\002" +
    "\000\010\003\024\017\022\024\023\001\002\000\004\026" +
    "\122\001\002\000\010\003\024\017\022\024\023\001\002" +
    "\000\004\026\124\001\002\000\010\003\024\017\022\024" +
    "\023\001\002\000\004\026\126\001\002\000\004\005\127" +
    "\001\002\000\004\025\130\001\002\000\012\002\ufff0\003" +
    "\ufff0\013\ufff0\014\ufff0\001\002\000\012\002\ufffa\003\ufffa" +
    "\013\ufffa\014\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\006\002\006\003\005\001\001\000\004\004" +
    "\051\001\001\000\002\001\001\000\004\013\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\012\003\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\015\001\001\000\002\001\001\000" +
    "\006\011\025\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\027\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\042" +
    "\001\001\000\004\012\041\001\001\000\004\012\040\001" +
    "\001\000\004\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\130" +
    "\001\001\000\002\001\001\000\004\010\112\001\001\000" +
    "\002\001\001\000\004\006\107\001\001\000\004\007\071" +
    "\001\001\000\004\006\057\001\001\000\006\011\061\012" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\063\012\024\001" +
    "\001\000\002\001\001\000\006\011\065\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\075\012\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\077\012\024\001\001\000\002\001\001" +
    "\000\006\011\101\012\024\001\001\000\002\001\001\000" +
    "\006\011\103\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\114\012\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\116\012\024\001\001\000\002\001\001\000\006" +
    "\011\120\012\024\001\001\000\002\001\001\000\006\011" +
    "\122\012\024\001\001\000\002\001\001\000\006\011\124" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser_Figuras$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser_Figuras$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser_Figuras$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ManejadorReportes manejadorReportes;/*agregado*/
    ManejadorErrores manejadorErrores;/*agregado*/
    RecolectorFiguras recolectorFiguras;/*agregado*/
    public Operador operador;/*agregado*/

    public parser_Figuras (lexer_Figuras lexer){//Esto no es necesario pues el lexer.java extiende de Scanner
        super(lexer);
        recolectorFiguras = new RecolectorFiguras();/*agregado*/
    }

    protected int error_sync_size() {
		return 1;
	}

	public void recibirListadoErroresYReportesUso(ListaEnlazada<ReporteError> listaDeErrores, ListaEnlazada<ListaEnlazada<Reporte>> listadoDeListadoDeReportes){/*agregado*/
        manejadorReportes = new ManejadorReportes(listadoDeListadoDeReportes);
        manejadorErrores = new ManejadorErrores(listaDeErrores);
        operador = new Operador(manejadorErrores);
	}

	public Pila<Figura> darPilaDeFiguras(){
	    return recolectorFiguras.darPilaDeFiguras();
	}

	public ListaEnlazada<ListaEnlazada<Reporte>> darListadoDeListadoDeReportes(){
	    return manejadorReportes.darListadoReportesFormada();
	}

	public ListaEnlazada<ReporteError> darListadoDeErrores(){
	    return manejadorErrores.darListaErroresHallados();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser_Figuras$actions {
  private final parser_Figuras parser;

  /** Constructor */
  CUP$parser_Figuras$actions(parser_Figuras parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser_Figuras$do_action_part00000000(
    int                        CUP$parser_Figuras$act_num,
    java_cup.runtime.lr_parser CUP$parser_Figuras$parser,
    java.util.Stack            CUP$parser_Figuras$stack,
    int                        CUP$parser_Figuras$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser_Figuras$result;

      /* select the action based on the action number */
      switch (CUP$parser_Figuras$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		RESULT = start_val;
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser_Figuras$parser.done_parsing();
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= graficar animar instruccion 
            {
              Object RESULT =null;

              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-2)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= 
            {
              Object RESULT =null;

              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= error 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.peek()).value;
		manejadorErrores.establecerError("error de instruccion", null, null, (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // graficar ::= GRAFICAR tipo 
            {
              Object RESULT =null;

              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("graficar",1, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipo ::= CIRCULO cuatroParam 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.agregarFigura(tipo.toString(), operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo ::= CUADRADO cuatroParam 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.agregarFigura(tipo.toString(), operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= RECTANGULO cincoParam 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.agregarFigura(tipo.toString(), operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= LINEA cincoParam 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.agregarFigura(tipo.toString(), operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= POLIGONO seisParam 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.agregarFigura(tipo.toString(), operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= error 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.peek()).value;
		manejadorErrores.establecerError("Falta Tipo Figura", null, null, (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tresParam ::= APER valorNumerico COMA valorNumerico COMA ANIMACION CIER 
            {
              Object RESULT =null;
		int animacionleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int animacionright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object animacion = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.agregarAnimacion((String)animacion, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tresParam",3, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-6)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tresParam ::= error CIER 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		manejadorErrores.establecerError("error en 3 Parametros", null, null, (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("tresParam",3, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuatroParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.establecerColor(color.toString());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("cuatroParam",4, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-8)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuatroParam ::= error CIER 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		manejadorErrores.establecerError("error en 4 Parametros", null, null, (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("cuatroParam",4, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cincoParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.establecerColor(color.toString());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("cincoParam",5, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-10)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cincoParam ::= error CIER 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		manejadorErrores.establecerError("error en 5 Parametros", null, null, (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("cincoParam",5, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seisParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		recolectorFiguras.establecerColor(color.toString());
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("seisParam",6, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-12)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // seisParam ::= error CIER 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		manejadorErrores.establecerError("error en 6 Parametros", null, null, (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("seisParam",6, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valorNumerico ::= parametroNumerico 
            {
              Object RESULT =null;
		operador.prepararVariablesParaProximoValor();
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("valorNumerico",7, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametroNumerico ::= parametroNumerico SUM parametroNumerico 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		operador.establecerTipoOperacion("SUM", Token.parseToken(sum).darFila(), Token.parseToken(sum).darColumna());/*recuerda que el operador solicita la fila y columna por si acaso hubiera error de / por 0...*/
                                                                     manejadorReportes.agregarReportesDeOcurrencia(manejadorErrores.darListaErroresHallados(), Token.parseToken(sum));/*debes averiguar como enviar la línea y columna, el anteiror y el siguiente xD*/
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-2)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametroNumerico ::= parametroNumerico RES parametroNumerico 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		operador.establecerTipoOperacion("RES", Token.parseToken(res).darFila(), Token.parseToken(res).darColumna());
                                                                     manejadorReportes.agregarReportesDeOcurrencia(manejadorErrores.darListaErroresHallados(), Token.parseToken(res));/*se envía el signo al setter de la var global para signo y se opera xD, esta axn es para todos los param#...xD*/
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-2)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametroNumerico ::= parametroNumerico MULT parametroNumerico 
            {
              Object RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		operador.establecerTipoOperacion("MULT", Token.parseToken(mult).darFila(), Token.parseToken(mult).darColumna());
                                                                     manejadorReportes.agregarReportesDeOcurrencia(manejadorErrores.darListaErroresHallados(), Token.parseToken(mult));
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-2)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametroNumerico ::= parametroNumerico DIV parametroNumerico 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		operador.establecerTipoOperacion("DIV", Token.parseToken(div).darFila(), Token.parseToken(div).darColumna());
                                                                     manejadorReportes.agregarReportesDeOcurrencia(manejadorErrores.darListaErroresHallados(), Token.parseToken(div));
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-2)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametroNumerico ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.peek()).value;
		operador.establecerNumeroAOperar(Double.parseDouble((String) num));/*se envía el # al método que asigna este val al 1ero [el del arr] o al 2do*/
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametroNumerico ::= APER parametroNumerico CIER 
            {
              Object RESULT =null;
		System.out.println("nada por hacer, pero creo que estos afectarían el desarrollo del proced...");
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-2)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametroNumerico ::= error COMA 
            {
              Object RESULT =null;
		int erradoleft = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).left;
		int erradoright = ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).right;
		Object errado = (Object)((java_cup.runtime.Symbol) CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)).value;
		manejadorErrores.establecerError("Operacion invalida", Token.parseToken(errado).darNombreAnterior(), Token.parseToken(errado).darNombreDelToken(), (String)errado, erradoleft, erradoright);
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("parametroNumerico",8, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-1)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // animar ::= ANIMAR OBJETO ANTERIOR tresParam 
            {
              Object RESULT =null;
		System.out.println("nada por hacer [pues en 3Param se add la anim..");
              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("animar",9, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.elementAt(CUP$parser_Figuras$top-3)), ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // animar ::= 
            {
              Object RESULT =null;

              CUP$parser_Figuras$result = parser.getSymbolFactory().newSymbol("animar",9, ((java_cup.runtime.Symbol)CUP$parser_Figuras$stack.peek()), RESULT);
            }
          return CUP$parser_Figuras$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser_Figuras$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser_Figuras$do_action(
    int                        CUP$parser_Figuras$act_num,
    java_cup.runtime.lr_parser CUP$parser_Figuras$parser,
    java.util.Stack            CUP$parser_Figuras$stack,
    int                        CUP$parser_Figuras$top)
    throws java.lang.Exception
    {
              return CUP$parser_Figuras$do_action_part00000000(
                               CUP$parser_Figuras$act_num,
                               CUP$parser_Figuras$parser,
                               CUP$parser_Figuras$stack,
                               CUP$parser_Figuras$top);
    }
}

}
