package Backend.Analizadores;
import java_cup.runtime.*;
import Backend.Manejadores.Operador;/*agregado: completamenteAdd*/
import Backend.Manejadores.ManejadorErrores;/*agregado*/
import Backend.Manejadores.ManejadorReportes;/*agregado*/
import Backend.RecolectorFiguras;/*agregado: completamenteAdd*/

class parser_Figuras;
parser code{:
    ManejadorReportes manejadorReportes;/*agregado*/
    ManejadorErrores manejadorErrores;/*agregado*/
    RecolectorFiguras recolectorFiguras;/*agregado*/
    Operador operador;/*agregado*/

    public parser_Figuras (lexer_Figuras lexer){//Esto no es necesario pues el lexer.java extiende de Scanner
        super(lexer);
        recolectorFiguras = new RecolectorFiguras();/*agregado*/
    }

    protected int error_sync_size() {
		return 1;
	}

	public void recibirListadoErroresYReportesUso(ListaEnlazada<ReporteError> listaDeErrores, ListaEnlazada<ListaEnlazada<Reporte>> listadoDeListadoDeReportes){/*agregado*/
        manejadorReportes = new ManejadorReportes(listadoDeListadoDeReportes);
        manejadorErrores = new ManejadorErrores(listaDeErrores);
        operador = new Operador(manejadorErrores);
	}
:}

terminal ANIMACION, COLOR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, NUMERO, SUM, RES, MULT, DIV, APER, CIER, COMA;

non terminal instruccion, graficar, tipo, tresParam, cuatroParam, cincoParam, seisParam, valorNumerico, parametroNumerico, animar;

/*precedencia < al >; asociatividad de izq a der*/
precedence left SUM, RES;
precedence left MULT, DIV;

start with instruccion;/*esta nueva forma de instrucción hará que no tenga que preocuparme por el arreglo que almacena los valores numéricos, puesto que la animación lo requerirá luego de haberse empleado los datos que se habían almacenado dentro de sí xD*/
instruccion ::= graficar animar instruccion
             |
	         | error: errado    {:manejadorErrores.establecerError("error de instruccion", null, null, errado, Integer.parseInt((String)erradoleft), Integer.parseInt((String)erradoright));:}/*lo voy a dejar con esto en esta línea, para que no olvides que con la modif de la var , left y right, obtienes la fila y columna respectivamente...*/
             ;/*si al hacer las pruebas, se mira que no es necesario, porque es "redundnate" (aunque no estoy segura que eso pase xD)  reemplazarás este .cup por el que está en git xD [en el que indicas que se haría el mejoramiento de recu de errores en graf y ani xD"*/

graficar ::= GRAFICAR tipo
          ;

/*parametrosGraficar ::= tipo
   esto genera conlicto con la prod "error" en animar... por lo cual este error (el que venga de más o no venga la palabra reservada con la que inicia la instrucción) deberá ser tratado o referido desde la prod de error de instruccion... al igual que con animar...;*/

tipo ::= CIRCULO:tipo cuatroParam                        {:recolectorFiguras.agregarFigura(tipo, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());:}/*en este punto reinicia sus valores operador, puesto que sabe que posiblemente tenga que trabajar con otro parám...*/
        | CUADRADO:tipo cuatroParam                      {:recolectorFiguras.agregarFigura(tipo, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());:}
        | RECTANGULO:tipo cincoParam                     {:recolectorFiguras.agregarFigura(tipo, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());:}
        | LINEA:tipo cincoParam                          {:recolectorFiguras.agregarFigura(tipo, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());:}
        | POLIGONO:tipo seisParam                        {:recolectorFiguras.agregarFigura(tipo, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());:}
        | error:errado                               {:manejadorErrores.establecerError("Falta Tipo Figura", null, null, errado, errado.darFila(), errado.darColumna());:}/*debes averiguar como enviar la línea y columna*/
        ;

tresParam ::= APER valorNumerico COMA valorNumerico COMA ANIMACION:animacion CIER             {:recolectorFiguras.agregarAnimacion(animacion, operador.todosLosParametrosCorrectos(), operador.darParametrosNumericos());:}
            | error:errado CIER                                                                      {:manejadorErrores.establecerError("error en 3 Parametros", null, null, errado, errado.darFila(), errado.darColumna());:}
            ;

cuatroParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR:color CIER    {:recolectorFiguras.establecerColor(color);:}
            | error:errado CIER                                                                       {:manejadorErrores.establecerError("error en 4 Parametros", null, null, errado, errado.darFila(), errado.darColumna());:}
            ;

cincoParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR:color CIER      {:recolectorFiguras.establecerColor(color);:}
            | error:errado CIER                                                                        {:manejadorErrores.establecerError("error en 5 Parametros", null, null, errado,errado.darFila(), errado.darColumna());:}
            ;

seisParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR:color CIER        {:recolectorFiguras.establecerColor(color);:}
            | error:errado CIER                                                                        {:manejadorErrores.establecerError("error en 6 Parametros", null, null, errado, errado.darFila(), errado.darColumna());:}
            ;

valorNumerico ::= parametroNumerico     {:operador.prepararVariablesParaProximoValor():}/*recuerda que esta axn se exe luego de haber terminado con todo lo que incolucre a parametroNumerico...*/
                ;

parametroNumerico ::= parametroNumerico SUM:sum parametroNumerico      {:operador.establecerTipoOperacion("SUM", sum.darFila(), sum.darColumna());/*recuerda que el operador solicita la fila y columna por si acaso hubiera error de / por 0...*/
                                                                     manejadorReportes(sum.darLexemaAnterior()+"+"+sum.darLexemaSiguiente(), sum.darFila(), sum.darColumna());/*debes averiguar como enviar la línea y columna, el anteiror y el siguiente xD*/:}
                | parametroNumerico RES:res parametroNumerico          {:operador.establecerTipoOperacion("RES", res.darFila(), res.darColumna());
                                                                     manejadorReportes(res.darLexemaAnterior()+"-"+res.darLexemaSiguiente(), res.darFila(), res.darColumna());/*se envía el signo al setter de la var global para signo y se opera xD, esta axn es para todos los param#...xD*/:}
                | parametroNumerico MULT:mult parametroNumerico         {:operador.establecerTipoOperacion("MULT", mult.darFila(), mult.darColumna());
                                                                     manejadorReportes(mult.darLexemaAnterior()+"*"+mult.darLexemaSiguiente(), mult.darFila(), mult.darColumna());:}
                | parametroNumerico DIV:div parametroNumerico          {:operador.establecerTipoOperacion("DIV", div.darFila(), div.darColumna());
                                                                     manejadorReportes(div.darLexemaAnterior()+"/"+div.darLexemaSiguiente(), div.darFila(), div.darColumna());:}
                | NUMERO: num                                      {:operador.establecerNumeroAOperar(Double.parseDouble((String) num));/*se envía el # al método que asigna este val al 1ero [el del arr] o al 2do*/:}
                | APER parametroNumerico CIER                  {:System.out.println("nada por hacer, pero creo que estos afectarían el desarrollo del proced...");:}/*por eso hay que hacer pruebas...*/
                | error:errado COMA                              {:manejadorErrores.establecerError("Operacion invalida", errado.darNombreAnterior(), errado.darNombreDelToken(), errado, errado.darFila(), errado.darColumna());:}/*tambien debes averiguar como enviar los nombres y el anteriro :| xD... sino tendrás que enviar "parámetros numéricos incorrectos, se esperaba operación o #..."*/
                  /*coloco este pues SIEMPRE depués de 
                  un val # hay [o debería xD] haber una
                  COMA*/
                ;/*no incluí el operador unario "-"" porque no tendría mucho sentido xD :v, creo que sí debería agregarlo xD, porque la pantalla se puede desplazar...*/

animar ::= ANIMAR OBJETO ANTERIOR tresParam    {:System.out.println("nada por hacer [pues en 3Param se add la anim..");:}
        |                                        
        ;/*el error de que venga de más una palabra resrevada con la que inicia la instrucc o que no venga, se tratará en la prod de error de instrucción...*/
/*Recuerda que eliminaste el NT instrucción para recuperación, puesto que CUP intentará recuperarse con cualquiera de las producciones del NT que lo contiene,
           y si no llegara a funcionar bien así, entonces coloca "graficar", pues no debería de buscar recuperarme con otra animación, por el hecho de que nunca debería ser
           lo que viniera al principio...*/
        


/*este es el correcto, xD sii funciona xD uuu gracias DIOS xD*/
/*de esta forma habrá que ver cómo se enviarán los errore por no venir "graficar" o "animar" "objeto""antetior" puesto que para ello estaban esas producciones de error*/
/*recuerda que para el e solo se deja el lado der del | vacío xD*/
