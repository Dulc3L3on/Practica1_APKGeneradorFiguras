package Backend.Analizadores;
import java_cup.runtime.*;

class parser_Figuras;
parser code{:
    public parser_Figuras (lexer_Figuras lexer){//Esto no es necesario pues el lexer.java extiende de Scanner
        super(lexer);
    }

    protected int error_sync_size() {
		return 1;
	}
:}

terminal ANIMACION, COLOR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, NUMERO, SUM, RES, MULT, DIV, APER, CIER, COMA;

non terminal instruccion, graficar, tipo, tresParam, cuatroParam, cincoParam, seisParam, valorNumerico, animar;

/*precedencia < al >; asociatividad de izq a der*/
precedence left SUM, RES;
precedence left MULT, DIV;

start with instruccion;/*esta nueva forma de instrucción hará que no tenga que preocuparme por el arreglo que almacena los valores numéricos, puesto que la animación lo requerirá luego de haberse empleado los datos que se habían almacenado dentro de sí xD*/
instruccion ::= graficar animar instruccion
             |
	         | error /*si al hacer las pruebas, se mira que no es necesario, porque es "redundnate" (aunque no estoy segura que eso pase xD)  reemplazarás este .cup por el que está en git xD [en el que indicas que se haría el mejoramiento de recu de errores en graf y ani xD"*/
             ;

graficar ::= GRAFICAR tipo	
          ;

/*parametrosGraficar ::= tipo
   esto genera conlicto con la prod "error" en animar... por lo cual este error (el que venga de más o no venga la palabra reservada con la que inicia la instrucción) deberá ser tratado o referido desde la prod de error de instruccion... al igual que con animar...;*/

tipo ::= CIRCULO cuatroParam /*se crea la figura, mejor de una vez aquí, pues en este punto todo ya ha salido bien...*/
        | CUADRADO cuatroParam
        | RECTANGULO cincoParam
        | LINEA cincoParam
        | POLIGONO seisParam
        | error
        ;

tresParam ::= APER valorNumerico COMA valorNumerico COMA ANIMACION CIER /*En cada producción de los parám, se hará la instanciación de las figuras que corrspondan y la add en el caso de esta prod...*/
            | error CIER
            ;

cuatroParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER
            | error CIER
            ;

cincoParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER
            | error CIER
            ;

seisParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER
            | error CIER
            ;

valorNumerico ::= valorNumerico SUM valorNumerico           /*axn: se envía el signo al setter de la var global para signo xD*//*tendrás que hacer que con esto se hagan las op como lo habías pensado, bueno la cuestión es que se sume bien xD -->  SI SE PUEDE!!! XD*/
                | valorNumerico RES valorNumerico           /*axn: se envía el signo al setter de la var global para signo xD*/
                | valorNumerico MULT valorNumerico          /*axn: se envía el signo al setter de la var global para signo xD*/
                | valorNumerico DIV valorNumerico           /*axn: se envía el signo al setter de la var global para signo xD*/
                | NUMERO                                    /*axn: se envía el número al método que se encarga de ssignar al 1ero [el del arr] o al 2do*/
                | APER valorNumerico CIER                   /*axn: nada por hacer xD... eso creo xD*//*la cuestión son estos (), tendría que haber una manera de hacer que no afecten en el desarrollo de las operaciones...*/
                | error COMA                                /*axn: enviar el tipo de error "PARÁMETRO numérico incorrecto. Se esperaba un # o una op*/
                  /*coloco este pues SIEMPRE depués de 
                  un val # hay [o debería xD] haber una
                  COMA*/
                ;/*no incluí el operador unario "-"" porque no tendría mucho sentido xD :v*/

animar ::= ANIMAR OBJETO ANTERIOR tresParam     /*axn: se agrega la animación a la figura*/
        |                                        
        ;/*el error de que venga de más una palabra resrevada con la que inicia la instrucc o que no venga, se tratará en la prod de error de instrucción...*/
/*Recuerda que eliminaste el NT instrucción para recuperación, puesto que CUP intentará recuperarse con cualquiera de las producciones del NT que lo contiene,
           y si no llegara a funcionar bien así, entonces coloca "graficar", pues no debería de buscar recuperarme con otra animación, por el hecho de que nunca debería ser
           lo que viniera al principio...*/
        


/*este es el correcto, xD sii funciona xD uuu gracias DIOS xD*/
/*de esta forma habrá que ver cómo se enviarán los errore por no venir "graficar" o "animar" "objeto""antetior" puesto que para ello estaban esas producciones de error*/
/*recuerda que para el e solo se deja el lado der del | vacío xD*/
