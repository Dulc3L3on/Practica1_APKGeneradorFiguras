import java_cup.runtime.*;

class parser_Figuras;
parser code{:
    public parser (lexer_Figuras lexer){//Esto no es necesario pues el lexer.java extiende de Scanner
        super(lexer);
    }

    protected int error_sync_size() {
		return 1;
	}
:}

terminal ANIMACION, COLOR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, NUMERO, SUM, RES, MULT, DIV, APER, CIER, COMA;

non terminal instruccion, graficar, tipo, tresParam, cuatroParam, cincoParam, seisParam, valorNumerico, sumaRes, sR, multiDiv, mD, valor, animar; 

/*precedencia < al >; asociatividad de izq a der*/
precedence left SUM, RES;
precedence left MULT, DIV;


instruccion ::= graficar instruccion                {/*llamar al método dibujar(hayQuegraficar [true])*/}
               | graficar animar instruccion        {/*llamar al método dibujar(hayQuegraficar [false])*/}
               | error    instruccion               {/*reportar animación extra o "debe iniciarse con una instrucción de graficación" si es el error está al principio... pero hay que ver cómo saber si es así o no...*/}
               ;       

graficar ::= GRAFICAR tipo                {/*nada que hacer [por el momento, creo xD]*/}             
            | error  instruccion          {/*reportar falta o posición inadecuada del lexe "graficar"*/}
            ;

tipo ::= CIRCULO cuatroParam    {/*enviar tipo de figura al setter de la varGLobal para tipoFig*/}
        | CUADRADO cuatroParam  {/*enviar tipo de figura al setter de la varGLobal para tipoFig*/}
        | RECTANGULO cincoParam {/*enviar tipo de figura al setter de la varGLobal para tipoFig*/}       
        | LINEA cincoParam      {/*enviar tipo de figura al setter de la varGLobal para tipoFig*/}
        | POLIGONO seisParam    {/*enviar tipo de figura al setter de la varGLobal para tipoFig*/}
        | error   instruccion   {/*reportar e hecho de que hizo falta o hay palabras "graficar" de más...*/}
        ;

tresParam ::= APER valorNumerico COMA valorNumerico COMA ANIMACION CIER        {/*enviar el tipo de animación*/}
            | error  valorNumerico|   ANIMACION | CIER                         {/*se envía el anterior para saber que es lo que faltaba: 
                                                                                  si graf  anterior -> (, si val# -> COMA, 
                                                                                  si COMA -> COLOR, si COLOR -> CIER
                                                                                  si el ant es un T: APER, COMA, COLOR o CIER, quiere decir que había algo extra...*/}

            ;/*si no se puede colocar las opciones para que se pueda recuperar con diferentes símbolos, entonces solo colocarás el ) y el msje
                "ERROR en los parámetros y a partir del lexema recibido por el T error, podrás dar una defi expecífica del error, teniendo en 
                cuenta lo que se dijo en el coment de la prod error a cerca de lo que se esperaba*/

cuatroParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER         {/*enviar el color*/}
            | error    valorNumerico | COLOR | CIER             {/*se envía el anterior para saber que es lo que faltaba: si graf 
                                                                  anterior -> (, si val# -> COMA, si COMA -> COLOR, si COLOR -> CIER
                                                                  si el ant es un T: APER, COMA, COLOR o CIER, quiere decir que había algo extra...*/}
            ;

cincoParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER          {/*enviar el color*/}
            | error    valorNumerico | COLOR | CIER              {/*se envía el anterior para saber que es lo que faltaba: si graf  anterior -> (, 
                                                                    si val# -> COMA, si COMA -> COLOR, si COLOR -> CIER
                                                                    si el ant es un T: APER, COMA, COLOR o CIER, quiere decir que había algo extra...*/}

seisParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER    {/*enviar el color*/}
            | error    valorNumerico | COLOR | CIER              {/*se envía el anterior para saber que es lo que faltaba: si graf  anterior -> (, 
                                                                    si val# -> COMA, si COMA -> COLOR, si COLOR -> CIER
                                                                    si el ant es un T: APER, COMA, COLOR o CIER, quiere decir que había algo extra...*/}
            ;

valorNumerico ::= valorNumerico SUM valorNumerico           {/*se envía el signo al setter de la var global para signo xD*/}/*tendrás que hacer que con esto se hagan las op como lo habías pensado, bueno la cuestión es que se sume bien xD -->  SI SE PUEDE!!! XD*/
                | valorNumerico RES valorNumerico           {/*se envía el signo al setter de la var global para signo xD*/}
                | valorNumerico MULT valorNumerico          {/*se envía el signo al setter de la var global para signo xD*/}
                | valorNumerico DIV valorNumerico           {/*se envía el signo al setter de la var global para signo xD*/}
                | NUMERO                                    {/*se envía el número al método que se encarga de ssignar al 1ero [el del arr] o al 2do*/}
                | APER valorNumerico CIER                   {/*nada por hacer xD... eso creo xD*/}/*la cuestión son estos (), tendría que haber una manera de hacer que no afecten en el desarrollo de las operaciones...*/
                | error COMA                                {/*enviar el tipo de error "PARÁMETRO numérico incorrecto. Se esperaba un # o una op*/}
                  /*coloco este pues SIEMPRE depués de 
                  un val # hay [o debería xD] haber una
                  COMA*/
                ;/*no incluí el operador unario "-"" porque no tendría mucho sentido xD :v*/

animar ::= ANIMAR OBJETO ANTERIOR tresParam     {/*nada que hacer*/}
        | error  instruccion                    {/*enviar el tipo de error al método de errores general*/}
        ;
        
/*valorNumerico ::= sumaRes             
            ;

sumaRes ::= multiDiv sR
   ;*//*recuerda que esto va después de la acción de la última producción...*/

/*sR ::= SUM multiDiv 
     | RES multiDiv 
     | error
     ;
*//*el parser es case sensitive, porque no le indiqué lo contrario... de todos modos revisa [el ej] xD*/

/*multiDiv ::= valor mD
    ;

mD ::= MULT valor 
    | DIV valor 
    |error
    ;

valor ::= APER sumaRes CIER
    | NUMERO
    | error
    ;
*//*no está mal, pero si necesita del epsilon...*/



/*recuerda que debes averiguar como hacer la eqq para el E: será con los espacios en blanco " "/t/f ??? o habrá que hace ralgo más, o habrá que cb la grám :| xD*/
