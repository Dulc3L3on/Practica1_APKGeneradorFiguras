package Backend.Analizadores;
import java_cup.runtime.*;

class parser_Figuras;
parser code{:
    public parser_Figuras (lexer_Figuras lexer){//Esto no es necesario pues el lexer.java extiende de Scanner
        super(lexer);
    }

    protected int error_sync_size() {
		return 1;
	}
:}

terminal ANIMACION, COLOR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, NUMERO, SUM, RES, MULT, DIV, APER, CIER, COMA;

non terminal instruccion, graficar, tipo, tresParam, cuatroParam, cincoParam, seisParam, valorNumerico, animar;

/*precedencia < al >; asociatividad de izq a der*/
precedence left SUM, RES;
precedence left MULT, DIV;

start with instruccion;/*esta nueva forma de instrucción hará que no tenga que preocuparme por el arreglo que almacena los valores numéricos, puesto que la animación lo requerirá luego de haberse empleado los datos que se habían almacenado dentro de sí xD*/
instruccion ::= graficar animar instruccion
             |
	         | error    {System.out.println("inicio de instruccion incorrecto");}
             ;/*si al hacer las pruebas, se mira que no es necesario, porque es "redundnate" (aunque no estoy segura que eso pase xD)  reemplazarás este .cup por el que está en git xD [en el que indicas que se haría el mejoramiento de recu de errores en graf y ani xD"*/

graficar ::= GRAFICAR tipo
          ;

/*parametrosGraficar ::= tipo
   esto genera conlicto con la prod "error" en animar... por lo cual este error (el que venga de más o no venga la palabra reservada con la que inicia la instrucción) deberá ser tratado o referido desde la prod de error de instruccion... al igual que con animar...;*/

tipo ::= CIRCULO cuatroParam                        {System.out.println("se envia el tipo de figura y se hace instanciacion");}
        | CUADRADO cuatroParam                      {System.out.println("se envia el tipo de figura y se hace instanciacion");}
        | RECTANGULO cincoParam                     {System.out.println("se envia el tipo de figura y se hace instanciacion");}
        | LINEA cincoParam                          {System.out.println("se envia el tipo de figura y se hace instanciacion");}
        | POLIGONO seisParam                        {System.out.println("se envia el tipo de figura y se hace instanciacion");}
        | error                                     {System.out.println("se envia el tipo de error al método general");}
        ;

tresParam ::= APER valorNumerico COMA valorNumerico COMA ANIMACION CIER             {System.out.println("se envia y agrega la animación");}
            | error CIER
            ;

cuatroParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER    {System.out.println("se envia el color");}
            | error CIER
            ;

cincoParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER      {System.out.println("se envia el color");}
            | error CIER
            ;

seisParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER        {System.out.println("se envia el color");}
            | error CIER
            ;

valorNumerico ::= valorNumerico SUM valorNumerico          {System.out.println("se envía el signo al setter de la var global para signo y se opera xD");}
                | valorNumerico RES valorNumerico          {System.out.println("se envía el signo al setter de la var global para signo y se opera xD");}
                | valorNumerico MULT valorNumerico         {System.out.println("se envía el signo al setter de la var global para signo y se opera xD");}
                | valorNumerico DIV valorNumerico          {System.out.println("se envía el signo al setter de la var global para signo y se opera xD");}
                | NUMERO                                   {System.out.println("se envía el # al método que asigna este val al 1ero [el del arr] o al 2do");}
                | APER valorNumerico CIER                  {System.out.println("nada por hacer, pero creo que estos afectarían el desarrollo del proced...");}/*por eso hay que hacer pruebas...*/
                | error COMA                                {System.out.println("se envia el tipo de error al método general");}/*axn: enviar el tipo de error "PARÁMETRO numérico incorrecto. Se esperaba un # o una op, esta mejor la descrip que puse en el método encargado del manejo de errores..*/
                  /*coloco este pues SIEMPRE depués de 
                  un val # hay [o debería xD] haber una
                  COMA*/
                ;/*no incluí el operador unario "-"" porque no tendría mucho sentido xD :v, creo que sí debería agregarlo xD, porque la pantalla se puede desplazar...*/

animar ::= ANIMAR OBJETO ANTERIOR tresParam    {System.out.println("nada por hacer [pues en 3Param se add la anim..");}
        |                                        
        ;/*el error de que venga de más una palabra resrevada con la que inicia la instrucc o que no venga, se tratará en la prod de error de instrucción...*/
/*Recuerda que eliminaste el NT instrucción para recuperación, puesto que CUP intentará recuperarse con cualquiera de las producciones del NT que lo contiene,
           y si no llegara a funcionar bien así, entonces coloca "graficar", pues no debería de buscar recuperarme con otra animación, por el hecho de que nunca debería ser
           lo que viniera al principio...*/
        


/*este es el correcto, xD sii funciona xD uuu gracias DIOS xD*/
/*de esta forma habrá que ver cómo se enviarán los errore por no venir "graficar" o "animar" "objeto""antetior" puesto que para ello estaban esas producciones de error*/
/*recuerda que para el e solo se deja el lado der del | vacío xD*/
