import java_cup.runtime.*;

class parser_Figuras;
parser code{:
    public parser (lexer_Figuras lexer){//Esto no es necesario pues el lexer.java extiende de Scanner
        super(lexer);
    }

    protected int error_sync_size() {
		return 1;
	}
:}

terminal ANIMACION, COLOR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, GRAFICAR, ANIMAR, OBJETO, ANTERIOR, NUMERO, SUM, RES, MULT, DIV, APER, CIER, COMA;

non terminal cuerpo, instruccion, graficar, tipo, tresParam, cuatroParam, cincoParam, seisParam, valorNumerico, animar;

/*precedencia < al >; asociatividad de izq a der*/
precedence left SUM, RES;
precedence left MULT, DIV;

start with cuerpo;
cuerpo ::= graficar instruccion
        ;

instruccion ::= animar graficar instruccion
             | graficar instruccion
             | graficar
             | animar
             ;

graficar ::= GRAFICAR tipo
          | error
          ;

tipo ::= CIRCULO cuatroParam
        | CUADRADO cuatroParam
        | RECTANGULO cincoParam
        | LINEA cincoParam
        | POLIGONO seisParam
        | error
        ;

tresParam ::= APER valorNumerico COMA valorNumerico COMA ANIMACION CIER
            | error CIER
            ;

cuatroParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER
            | error CIER
            ;

cincoParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER
            | error CIER
            ;

seisParam ::= APER valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA valorNumerico COMA COLOR CIER
            | error CIER
            ;

valorNumerico ::= valorNumerico SUM valorNumerico           /*axn: se envía el signo al setter de la var global para signo xD*//*tendrás que hacer que con esto se hagan las op como lo habías pensado, bueno la cuestión es que se sume bien xD -->  SI SE PUEDE!!! XD*/
                | valorNumerico RES valorNumerico           /*axn: se envía el signo al setter de la var global para signo xD*/
                | valorNumerico MULT valorNumerico          /*axn: se envía el signo al setter de la var global para signo xD*/
                | valorNumerico DIV valorNumerico           /*axn: se envía el signo al setter de la var global para signo xD*/
                | NUMERO                                    /*axn: se envía el número al método que se encarga de ssignar al 1ero [el del arr] o al 2do*/
                | APER valorNumerico CIER                   /*axn: nada por hacer xD... eso creo xD*//*la cuestión son estos (), tendría que haber una manera de hacer que no afecten en el desarrollo de las operaciones...*/
                | error COMA                                /*axn: enviar el tipo de error "PARÁMETRO numérico incorrecto. Se esperaba un # o una op*/
                  /*coloco este pues SIEMPRE depués de 
                  un val # hay [o debería xD] haber una
                  COMA*/
                ;/*no incluí el operador unario "-"" porque no tendría mucho sentido xD :v*/

animar ::= ANIMAR OBJETO ANTERIOR tresParam     /*axn: nada que hacer*/
        | error                                 /*axn: enviar el tipo de error al método de errores general*/
        ;/*[mejor que si se quede y qye se eli de la producción general...]recuerda que eliminaste el NT instrucción para recuperación, puesto que CUP intentará recuperarse con cualquiera de las producciones del NT que lo contiene,
           y si no llegara a funcionar bien así, entonces coloca "graficar", pues no debería de buscar recuperarme con otra animación, por el hecho de que nunca debería ser
           lo que viniera al principio...*/
        



/*recuerda que debes averiguar como hacer la eqq para el E: será con los espacios en blanco " "/t/f ??? o habrá que hace ralgo más, o habrá que cb la grám :| xD*/
